/*
 * Lambda Cloud API
 * API for interacting with the Lambda GPU Cloud
 *
 * The version of the OpenAPI document: 1.5.1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.InstanceCreateInstancesRequest;
import com.konfigthis.client.model.InstanceCreateInstancesResponse;
import com.konfigthis.client.model.InstanceGetDetailsResponse;
import com.konfigthis.client.model.InstanceListRunningInstancesResponse;
import com.konfigthis.client.model.InstanceRestartInstancesRequest;
import com.konfigthis.client.model.InstanceRestartInstancesResponse;
import com.konfigthis.client.model.InstanceTerminateInstanceRequest;
import com.konfigthis.client.model.InstanceTerminateInstanceResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class InstanceApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public InstanceApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public InstanceApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createInstancesCall(InstanceCreateInstancesRequest instanceCreateInstancesRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = instanceCreateInstancesRequest;

        // create path and map variables
        String localVarPath = "/instance-operations/launch";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth", "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createInstancesValidateBeforeCall(InstanceCreateInstancesRequest instanceCreateInstancesRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'instanceCreateInstancesRequest' is set
        if (instanceCreateInstancesRequest == null) {
            throw new ApiException("Missing the required parameter 'instanceCreateInstancesRequest' when calling createInstances(Async)");
        }

        return createInstancesCall(instanceCreateInstancesRequest, _callback);

    }


    private ApiResponse<InstanceCreateInstancesResponse> createInstancesWithHttpInfo(InstanceCreateInstancesRequest instanceCreateInstancesRequest) throws ApiException {
        okhttp3.Call localVarCall = createInstancesValidateBeforeCall(instanceCreateInstancesRequest, null);
        Type localVarReturnType = new TypeToken<InstanceCreateInstancesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createInstancesAsync(InstanceCreateInstancesRequest instanceCreateInstancesRequest, final ApiCallback<InstanceCreateInstancesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createInstancesValidateBeforeCall(instanceCreateInstancesRequest, _callback);
        Type localVarReturnType = new TypeToken<InstanceCreateInstancesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateInstancesRequestBuilder {
        private final String regionName;
        private final String instanceTypeName;
        private final List<String> sshKeyNames;
        private List<String> fileSystemNames;
        private Integer quantity;
        private String name;

        private CreateInstancesRequestBuilder(String regionName, String instanceTypeName, List<String> sshKeyNames) {
            this.regionName = regionName;
            this.instanceTypeName = instanceTypeName;
            this.sshKeyNames = sshKeyNames;
        }

        /**
         * Set fileSystemNames
         * @param fileSystemNames Names of the file systems to attach to the instances. Currently, only one (if any) file system may be specified. (optional)
         * @return CreateInstancesRequestBuilder
         */
        public CreateInstancesRequestBuilder fileSystemNames(List<String> fileSystemNames) {
            this.fileSystemNames = fileSystemNames;
            return this;
        }
        
        /**
         * Set quantity
         * @param quantity Number of instances to launch (optional, default to 1)
         * @return CreateInstancesRequestBuilder
         */
        public CreateInstancesRequestBuilder quantity(Integer quantity) {
            this.quantity = quantity;
            return this;
        }
        
        /**
         * Set name
         * @param name User-provided name for the instance (optional)
         * @return CreateInstancesRequestBuilder
         */
        public CreateInstancesRequestBuilder name(String name) {
            this.name = name;
            return this;
        }
        
        /**
         * Build call for createInstances
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            InstanceCreateInstancesRequest instanceCreateInstancesRequest = buildBodyParams();
            return createInstancesCall(instanceCreateInstancesRequest, _callback);
        }

        private InstanceCreateInstancesRequest buildBodyParams() {
            InstanceCreateInstancesRequest instanceCreateInstancesRequest = new InstanceCreateInstancesRequest();
            instanceCreateInstancesRequest.regionName(this.regionName);
            instanceCreateInstancesRequest.instanceTypeName(this.instanceTypeName);
            instanceCreateInstancesRequest.sshKeyNames(this.sshKeyNames);
            instanceCreateInstancesRequest.fileSystemNames(this.fileSystemNames);
            instanceCreateInstancesRequest.quantity(this.quantity);
            instanceCreateInstancesRequest.name(this.name);
            return instanceCreateInstancesRequest;
        }

        /**
         * Execute createInstances request
         * @return InstanceCreateInstancesResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public InstanceCreateInstancesResponse execute() throws ApiException {
            InstanceCreateInstancesRequest instanceCreateInstancesRequest = buildBodyParams();
            ApiResponse<InstanceCreateInstancesResponse> localVarResp = createInstancesWithHttpInfo(instanceCreateInstancesRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createInstances request with HTTP info returned
         * @return ApiResponse&lt;InstanceCreateInstancesResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<InstanceCreateInstancesResponse> executeWithHttpInfo() throws ApiException {
            InstanceCreateInstancesRequest instanceCreateInstancesRequest = buildBodyParams();
            return createInstancesWithHttpInfo(instanceCreateInstancesRequest);
        }

        /**
         * Execute createInstances request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<InstanceCreateInstancesResponse> _callback) throws ApiException {
            InstanceCreateInstancesRequest instanceCreateInstancesRequest = buildBodyParams();
            return createInstancesAsync(instanceCreateInstancesRequest, _callback);
        }
    }

    /**
     * Launch instances
     * Launches one or more instances of a given instance type.
     * @param instanceCreateInstancesRequest  (required)
     * @return CreateInstancesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public CreateInstancesRequestBuilder createInstances(String regionName, String instanceTypeName, List<String> sshKeyNames) throws IllegalArgumentException {
        if (regionName == null) throw new IllegalArgumentException("\"regionName\" is required but got null");
            

        if (instanceTypeName == null) throw new IllegalArgumentException("\"instanceTypeName\" is required but got null");
            

        if (sshKeyNames == null) throw new IllegalArgumentException("\"sshKeyNames\" is required but got null");
        return new CreateInstancesRequestBuilder(regionName, instanceTypeName, sshKeyNames);
    }
    private okhttp3.Call getDetailsCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/instances/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth", "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDetailsValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getDetails(Async)");
        }

        return getDetailsCall(id, _callback);

    }


    private ApiResponse<InstanceGetDetailsResponse> getDetailsWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = getDetailsValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<InstanceGetDetailsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getDetailsAsync(String id, final ApiCallback<InstanceGetDetailsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDetailsValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<InstanceGetDetailsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetDetailsRequestBuilder {
        private final String id;

        private GetDetailsRequestBuilder(String id) {
            this.id = id;
        }

        /**
         * Build call for getDetails
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getDetailsCall(id, _callback);
        }


        /**
         * Execute getDetails request
         * @return InstanceGetDetailsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public InstanceGetDetailsResponse execute() throws ApiException {
            ApiResponse<InstanceGetDetailsResponse> localVarResp = getDetailsWithHttpInfo(id);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getDetails request with HTTP info returned
         * @return ApiResponse&lt;InstanceGetDetailsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<InstanceGetDetailsResponse> executeWithHttpInfo() throws ApiException {
            return getDetailsWithHttpInfo(id);
        }

        /**
         * Execute getDetails request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<InstanceGetDetailsResponse> _callback) throws ApiException {
            return getDetailsAsync(id, _callback);
        }
    }

    /**
     * List details of a specific instance
     * Retrieves details of a specific instance, including whether or not the instance is running. 
     * @param id The unique identifier (ID) of the instance (required)
     * @return GetDetailsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public GetDetailsRequestBuilder getDetails(String id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new GetDetailsRequestBuilder(id);
    }
    private okhttp3.Call listRunningInstancesCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/instances";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth", "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listRunningInstancesValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return listRunningInstancesCall(_callback);

    }


    private ApiResponse<InstanceListRunningInstancesResponse> listRunningInstancesWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = listRunningInstancesValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<InstanceListRunningInstancesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listRunningInstancesAsync(final ApiCallback<InstanceListRunningInstancesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listRunningInstancesValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<InstanceListRunningInstancesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListRunningInstancesRequestBuilder {

        private ListRunningInstancesRequestBuilder() {
        }

        /**
         * Build call for listRunningInstances
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listRunningInstancesCall(_callback);
        }


        /**
         * Execute listRunningInstances request
         * @return InstanceListRunningInstancesResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public InstanceListRunningInstancesResponse execute() throws ApiException {
            ApiResponse<InstanceListRunningInstancesResponse> localVarResp = listRunningInstancesWithHttpInfo();
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listRunningInstances request with HTTP info returned
         * @return ApiResponse&lt;InstanceListRunningInstancesResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<InstanceListRunningInstancesResponse> executeWithHttpInfo() throws ApiException {
            return listRunningInstancesWithHttpInfo();
        }

        /**
         * Execute listRunningInstances request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<InstanceListRunningInstancesResponse> _callback) throws ApiException {
            return listRunningInstancesAsync(_callback);
        }
    }

    /**
     * List running instances
     * Retrieves a detailed list of running instances.
     * @return ListRunningInstancesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ListRunningInstancesRequestBuilder listRunningInstances() throws IllegalArgumentException {
        return new ListRunningInstancesRequestBuilder();
    }
    private okhttp3.Call restartInstancesCall(InstanceRestartInstancesRequest instanceRestartInstancesRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = instanceRestartInstancesRequest;

        // create path and map variables
        String localVarPath = "/instance-operations/restart";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth", "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call restartInstancesValidateBeforeCall(InstanceRestartInstancesRequest instanceRestartInstancesRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'instanceRestartInstancesRequest' is set
        if (instanceRestartInstancesRequest == null) {
            throw new ApiException("Missing the required parameter 'instanceRestartInstancesRequest' when calling restartInstances(Async)");
        }

        return restartInstancesCall(instanceRestartInstancesRequest, _callback);

    }


    private ApiResponse<InstanceRestartInstancesResponse> restartInstancesWithHttpInfo(InstanceRestartInstancesRequest instanceRestartInstancesRequest) throws ApiException {
        okhttp3.Call localVarCall = restartInstancesValidateBeforeCall(instanceRestartInstancesRequest, null);
        Type localVarReturnType = new TypeToken<InstanceRestartInstancesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call restartInstancesAsync(InstanceRestartInstancesRequest instanceRestartInstancesRequest, final ApiCallback<InstanceRestartInstancesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = restartInstancesValidateBeforeCall(instanceRestartInstancesRequest, _callback);
        Type localVarReturnType = new TypeToken<InstanceRestartInstancesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class RestartInstancesRequestBuilder {
        private final List<String> instanceIds;

        private RestartInstancesRequestBuilder(List<String> instanceIds) {
            this.instanceIds = instanceIds;
        }

        /**
         * Build call for restartInstances
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            InstanceRestartInstancesRequest instanceRestartInstancesRequest = buildBodyParams();
            return restartInstancesCall(instanceRestartInstancesRequest, _callback);
        }

        private InstanceRestartInstancesRequest buildBodyParams() {
            InstanceRestartInstancesRequest instanceRestartInstancesRequest = new InstanceRestartInstancesRequest();
            instanceRestartInstancesRequest.instanceIds(this.instanceIds);
            return instanceRestartInstancesRequest;
        }

        /**
         * Execute restartInstances request
         * @return InstanceRestartInstancesResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public InstanceRestartInstancesResponse execute() throws ApiException {
            InstanceRestartInstancesRequest instanceRestartInstancesRequest = buildBodyParams();
            ApiResponse<InstanceRestartInstancesResponse> localVarResp = restartInstancesWithHttpInfo(instanceRestartInstancesRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute restartInstances request with HTTP info returned
         * @return ApiResponse&lt;InstanceRestartInstancesResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<InstanceRestartInstancesResponse> executeWithHttpInfo() throws ApiException {
            InstanceRestartInstancesRequest instanceRestartInstancesRequest = buildBodyParams();
            return restartInstancesWithHttpInfo(instanceRestartInstancesRequest);
        }

        /**
         * Execute restartInstances request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<InstanceRestartInstancesResponse> _callback) throws ApiException {
            InstanceRestartInstancesRequest instanceRestartInstancesRequest = buildBodyParams();
            return restartInstancesAsync(instanceRestartInstancesRequest, _callback);
        }
    }

    /**
     * Restart instances
     * Restarts the given instances.
     * @param instanceRestartInstancesRequest  (required)
     * @return RestartInstancesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public RestartInstancesRequestBuilder restartInstances(List<String> instanceIds) throws IllegalArgumentException {
        if (instanceIds == null) throw new IllegalArgumentException("\"instanceIds\" is required but got null");
        return new RestartInstancesRequestBuilder(instanceIds);
    }
    private okhttp3.Call terminateInstanceCall(InstanceTerminateInstanceRequest instanceTerminateInstanceRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = instanceTerminateInstanceRequest;

        // create path and map variables
        String localVarPath = "/instance-operations/terminate";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth", "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call terminateInstanceValidateBeforeCall(InstanceTerminateInstanceRequest instanceTerminateInstanceRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'instanceTerminateInstanceRequest' is set
        if (instanceTerminateInstanceRequest == null) {
            throw new ApiException("Missing the required parameter 'instanceTerminateInstanceRequest' when calling terminateInstance(Async)");
        }

        return terminateInstanceCall(instanceTerminateInstanceRequest, _callback);

    }


    private ApiResponse<InstanceTerminateInstanceResponse> terminateInstanceWithHttpInfo(InstanceTerminateInstanceRequest instanceTerminateInstanceRequest) throws ApiException {
        okhttp3.Call localVarCall = terminateInstanceValidateBeforeCall(instanceTerminateInstanceRequest, null);
        Type localVarReturnType = new TypeToken<InstanceTerminateInstanceResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call terminateInstanceAsync(InstanceTerminateInstanceRequest instanceTerminateInstanceRequest, final ApiCallback<InstanceTerminateInstanceResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = terminateInstanceValidateBeforeCall(instanceTerminateInstanceRequest, _callback);
        Type localVarReturnType = new TypeToken<InstanceTerminateInstanceResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class TerminateInstanceRequestBuilder {
        private final List<String> instanceIds;

        private TerminateInstanceRequestBuilder(List<String> instanceIds) {
            this.instanceIds = instanceIds;
        }

        /**
         * Build call for terminateInstance
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            InstanceTerminateInstanceRequest instanceTerminateInstanceRequest = buildBodyParams();
            return terminateInstanceCall(instanceTerminateInstanceRequest, _callback);
        }

        private InstanceTerminateInstanceRequest buildBodyParams() {
            InstanceTerminateInstanceRequest instanceTerminateInstanceRequest = new InstanceTerminateInstanceRequest();
            instanceTerminateInstanceRequest.instanceIds(this.instanceIds);
            return instanceTerminateInstanceRequest;
        }

        /**
         * Execute terminateInstance request
         * @return InstanceTerminateInstanceResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public InstanceTerminateInstanceResponse execute() throws ApiException {
            InstanceTerminateInstanceRequest instanceTerminateInstanceRequest = buildBodyParams();
            ApiResponse<InstanceTerminateInstanceResponse> localVarResp = terminateInstanceWithHttpInfo(instanceTerminateInstanceRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute terminateInstance request with HTTP info returned
         * @return ApiResponse&lt;InstanceTerminateInstanceResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<InstanceTerminateInstanceResponse> executeWithHttpInfo() throws ApiException {
            InstanceTerminateInstanceRequest instanceTerminateInstanceRequest = buildBodyParams();
            return terminateInstanceWithHttpInfo(instanceTerminateInstanceRequest);
        }

        /**
         * Execute terminateInstance request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<InstanceTerminateInstanceResponse> _callback) throws ApiException {
            InstanceTerminateInstanceRequest instanceTerminateInstanceRequest = buildBodyParams();
            return terminateInstanceAsync(instanceTerminateInstanceRequest, _callback);
        }
    }

    /**
     * Terminate an instance
     * Terminates a given instance.
     * @param instanceTerminateInstanceRequest  (required)
     * @return TerminateInstanceRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public TerminateInstanceRequestBuilder terminateInstance(List<String> instanceIds) throws IllegalArgumentException {
        if (instanceIds == null) throw new IllegalArgumentException("\"instanceIds\" is required but got null");
        return new TerminateInstanceRequestBuilder(instanceIds);
    }
}
