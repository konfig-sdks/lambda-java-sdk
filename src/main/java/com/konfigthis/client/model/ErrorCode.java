/*
 * Lambda Cloud API
 * API for interacting with the Lambda GPU Cloud
 *
 * The version of the OpenAPI document: 1.5.1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import io.swagger.annotations.ApiModel;
import com.google.gson.annotations.SerializedName;

import java.io.IOException;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

/**
 * Unique identifier for the type of error
 */
@JsonAdapter(ErrorCode.Adapter.class)public enum ErrorCode {
  
  GLOBAL_UNKNOWN("global/unknown"),
  
  GLOBAL_INVALID_API_KEY("global/invalid-api-key"),
  
  GLOBAL_ACCOUNT_INACTIVE("global/account-inactive"),
  
  GLOBAL_INVALID_ADDRESS("global/invalid-address"),
  
  GLOBAL_INVALID_PARAMETERS("global/invalid-parameters"),
  
  GLOBAL_OBJECT_DOES_NOT_EXIST("global/object-does-not-exist"),
  
  GLOBAL_QUOTA_EXCEEDED("global/quota-exceeded"),
  
  INSTANCE_OPERATIONS_LAUNCH_INSUFFICIENT_CAPACITY("instance-operations/launch/insufficient-capacity"),
  
  INSTANCE_OPERATIONS_LAUNCH_FILE_SYSTEM_IN_WRONG_REGION("instance-operations/launch/file-system-in-wrong-region"),
  
  INSTANCE_OPERATIONS_LAUNCH_FILE_SYSTEMS_NOT_SUPPORTED("instance-operations/launch/file-systems-not-supported"),
  
  SSH_KEYS_KEY_IN_USE("ssh-keys/key-in-use");

  private String value;

  ErrorCode(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static ErrorCode fromValue(String value) {
    for (ErrorCode b : ErrorCode.values()) {
      if (b.value.equals(value)) {
        return b;
      }
    }
    throw new IllegalArgumentException("Unexpected value '" + value + "'");
  }

  public static class Adapter extends TypeAdapter<ErrorCode> {
    @Override
    public void write(final JsonWriter jsonWriter, final ErrorCode enumeration) throws IOException {
      jsonWriter.value(enumeration.getValue());
    }

    @Override
    public ErrorCode read(final JsonReader jsonReader) throws IOException {
      String value = jsonReader.nextString();
      return ErrorCode.fromValue(value);
    }
  }
}

