/*
 * Lambda Cloud API
 * API for interacting with the Lambda GPU Cloud
 *
 * The version of the OpenAPI document: 1.5.1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * InstanceCreateInstancesRequest
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class InstanceCreateInstancesRequest {
  public static final String SERIALIZED_NAME_REGION_NAME = "region_name";
  @SerializedName(SERIALIZED_NAME_REGION_NAME)
  private String regionName;

  public static final String SERIALIZED_NAME_INSTANCE_TYPE_NAME = "instance_type_name";
  @SerializedName(SERIALIZED_NAME_INSTANCE_TYPE_NAME)
  private String instanceTypeName;

  public static final String SERIALIZED_NAME_SSH_KEY_NAMES = "ssh_key_names";
  @SerializedName(SERIALIZED_NAME_SSH_KEY_NAMES)
  private List<String> sshKeyNames = new ArrayList<>();

  public static final String SERIALIZED_NAME_FILE_SYSTEM_NAMES = "file_system_names";
  @SerializedName(SERIALIZED_NAME_FILE_SYSTEM_NAMES)
  private List<String> fileSystemNames = null;

  public static final String SERIALIZED_NAME_QUANTITY = "quantity";
  @SerializedName(SERIALIZED_NAME_QUANTITY)
  private Integer quantity = 1;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public InstanceCreateInstancesRequest() {
  }

  public InstanceCreateInstancesRequest regionName(String regionName) {
    
    
    
    
    this.regionName = regionName;
    return this;
  }

   /**
   * Short name of a region
   * @return regionName
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "us-tx-1", required = true, value = "Short name of a region")

  public String getRegionName() {
    return regionName;
  }


  public void setRegionName(String regionName) {
    
    
    
    this.regionName = regionName;
  }


  public InstanceCreateInstancesRequest instanceTypeName(String instanceTypeName) {
    
    
    
    
    this.instanceTypeName = instanceTypeName;
    return this;
  }

   /**
   * Name of an instance type
   * @return instanceTypeName
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "gpu_1x_a100", required = true, value = "Name of an instance type")

  public String getInstanceTypeName() {
    return instanceTypeName;
  }


  public void setInstanceTypeName(String instanceTypeName) {
    
    
    
    this.instanceTypeName = instanceTypeName;
  }


  public InstanceCreateInstancesRequest sshKeyNames(List<String> sshKeyNames) {
    
    
    
    
    this.sshKeyNames = sshKeyNames;
    return this;
  }

  public InstanceCreateInstancesRequest addSshKeyNamesItem(String sshKeyNamesItem) {
    this.sshKeyNames.add(sshKeyNamesItem);
    return this;
  }

   /**
   * Names of the SSH keys to allow access to the instances. Currently, exactly one SSH key must be specified.
   * @return sshKeyNames
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Names of the SSH keys to allow access to the instances. Currently, exactly one SSH key must be specified.")

  public List<String> getSshKeyNames() {
    return sshKeyNames;
  }


  public void setSshKeyNames(List<String> sshKeyNames) {
    
    
    
    this.sshKeyNames = sshKeyNames;
  }


  public InstanceCreateInstancesRequest fileSystemNames(List<String> fileSystemNames) {
    
    
    
    
    this.fileSystemNames = fileSystemNames;
    return this;
  }

  public InstanceCreateInstancesRequest addFileSystemNamesItem(String fileSystemNamesItem) {
    if (this.fileSystemNames == null) {
      this.fileSystemNames = new ArrayList<>();
    }
    this.fileSystemNames.add(fileSystemNamesItem);
    return this;
  }

   /**
   * Names of the file systems to attach to the instances. Currently, only one (if any) file system may be specified.
   * @return fileSystemNames
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Names of the file systems to attach to the instances. Currently, only one (if any) file system may be specified.")

  public List<String> getFileSystemNames() {
    return fileSystemNames;
  }


  public void setFileSystemNames(List<String> fileSystemNames) {
    
    
    
    this.fileSystemNames = fileSystemNames;
  }


  public InstanceCreateInstancesRequest quantity(Integer quantity) {
    if (quantity != null && quantity < 1) {
      throw new IllegalArgumentException("Invalid value for quantity. Must be greater than or equal to 1.");
    }
    if (quantity != null && quantity > 1) {
      throw new IllegalArgumentException("Invalid value for quantity. Must be less than or equal to 1.");
    }
    
    
    this.quantity = quantity;
    return this;
  }

   /**
   * Number of instances to launch
   * minimum: 1
   * maximum: 1
   * @return quantity
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "1", value = "Number of instances to launch")

  public Integer getQuantity() {
    return quantity;
  }


  public void setQuantity(Integer quantity) {
    if (quantity != null && quantity < 1) {
      throw new IllegalArgumentException("Invalid value for quantity. Must be greater than or equal to 1.");
    }
    if (quantity != null && quantity > 1) {
      throw new IllegalArgumentException("Invalid value for quantity. Must be less than or equal to 1.");
    }
    
    this.quantity = quantity;
  }


  public InstanceCreateInstancesRequest name(String name) {
    
    
    if (name != null && name.length() < 1) {
      throw new IllegalArgumentException("Invalid value for name. Length must be greater than or equal to 1.");
    }
    
    this.name = name;
    return this;
  }

   /**
   * User-provided name for the instance
   * @return name
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "training-node-1", value = "User-provided name for the instance")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    
    
    if (name != null && name.length() < 1) {
      throw new IllegalArgumentException("Invalid value for name. Length must be greater than or equal to 1.");
    }
    this.name = name;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the InstanceCreateInstancesRequest instance itself
   */
  public InstanceCreateInstancesRequest putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InstanceCreateInstancesRequest instanceCreateInstancesRequest = (InstanceCreateInstancesRequest) o;
    return Objects.equals(this.regionName, instanceCreateInstancesRequest.regionName) &&
        Objects.equals(this.instanceTypeName, instanceCreateInstancesRequest.instanceTypeName) &&
        Objects.equals(this.sshKeyNames, instanceCreateInstancesRequest.sshKeyNames) &&
        Objects.equals(this.fileSystemNames, instanceCreateInstancesRequest.fileSystemNames) &&
        Objects.equals(this.quantity, instanceCreateInstancesRequest.quantity) &&
        Objects.equals(this.name, instanceCreateInstancesRequest.name)&&
        Objects.equals(this.additionalProperties, instanceCreateInstancesRequest.additionalProperties);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(regionName, instanceTypeName, sshKeyNames, fileSystemNames, quantity, name, additionalProperties);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InstanceCreateInstancesRequest {\n");
    sb.append("    regionName: ").append(toIndentedString(regionName)).append("\n");
    sb.append("    instanceTypeName: ").append(toIndentedString(instanceTypeName)).append("\n");
    sb.append("    sshKeyNames: ").append(toIndentedString(sshKeyNames)).append("\n");
    sb.append("    fileSystemNames: ").append(toIndentedString(fileSystemNames)).append("\n");
    sb.append("    quantity: ").append(toIndentedString(quantity)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("region_name");
    openapiFields.add("instance_type_name");
    openapiFields.add("ssh_key_names");
    openapiFields.add("file_system_names");
    openapiFields.add("quantity");
    openapiFields.add("name");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("region_name");
    openapiRequiredFields.add("instance_type_name");
    openapiRequiredFields.add("ssh_key_names");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to InstanceCreateInstancesRequest
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!InstanceCreateInstancesRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in InstanceCreateInstancesRequest is not found in the empty JSON string", InstanceCreateInstancesRequest.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : InstanceCreateInstancesRequest.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("region_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `region_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("region_name").toString()));
      }
      if (!jsonObj.get("instance_type_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `instance_type_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("instance_type_name").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("ssh_key_names") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("ssh_key_names").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `ssh_key_names` to be an array in the JSON string but got `%s`", jsonObj.get("ssh_key_names").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("file_system_names") != null && !jsonObj.get("file_system_names").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `file_system_names` to be an array in the JSON string but got `%s`", jsonObj.get("file_system_names").toString()));
      }
      if (!jsonObj.get("name").isJsonNull() && (jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!InstanceCreateInstancesRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'InstanceCreateInstancesRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<InstanceCreateInstancesRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(InstanceCreateInstancesRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<InstanceCreateInstancesRequest>() {
           @Override
           public void write(JsonWriter out, InstanceCreateInstancesRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public InstanceCreateInstancesRequest read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             InstanceCreateInstancesRequest instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of InstanceCreateInstancesRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of InstanceCreateInstancesRequest
  * @throws IOException if the JSON string is invalid with respect to InstanceCreateInstancesRequest
  */
  public static InstanceCreateInstancesRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, InstanceCreateInstancesRequest.class);
  }

 /**
  * Convert an instance of InstanceCreateInstancesRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

