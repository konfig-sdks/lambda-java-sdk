/*
 * Lambda Cloud API
 * API for interacting with the Lambda GPU Cloud
 *
 * The version of the OpenAPI document: 1.5.1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.InstanceType;
import com.konfigthis.client.model.Region;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * Virtual machine (VM) in Lambda Cloud
 */
@ApiModel(description = "Virtual machine (VM) in Lambda Cloud")@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class Instance {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_IP = "ip";
  @SerializedName(SERIALIZED_NAME_IP)
  private String ip;

  /**
   * The current status of the instance
   */
  @JsonAdapter(StatusEnum.Adapter.class)
 public enum StatusEnum {
    ACTIVE("active"),
    
    BOOTING("booting"),
    
    UNHEALTHY("unhealthy"),
    
    TERMINATING("terminating"),
    
    TERMINATED("terminated");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  public static final String SERIALIZED_NAME_SSH_KEY_NAMES = "ssh_key_names";
  @SerializedName(SERIALIZED_NAME_SSH_KEY_NAMES)
  private List<String> sshKeyNames = new ArrayList<>();

  public static final String SERIALIZED_NAME_FILE_SYSTEM_NAMES = "file_system_names";
  @SerializedName(SERIALIZED_NAME_FILE_SYSTEM_NAMES)
  private List<String> fileSystemNames = new ArrayList<>();

  public static final String SERIALIZED_NAME_REGION = "region";
  @SerializedName(SERIALIZED_NAME_REGION)
  private Region region;

  public static final String SERIALIZED_NAME_INSTANCE_TYPE = "instance_type";
  @SerializedName(SERIALIZED_NAME_INSTANCE_TYPE)
  private InstanceType instanceType;

  public static final String SERIALIZED_NAME_HOSTNAME = "hostname";
  @SerializedName(SERIALIZED_NAME_HOSTNAME)
  private String hostname;

  public static final String SERIALIZED_NAME_JUPYTER_TOKEN = "jupyter_token";
  @SerializedName(SERIALIZED_NAME_JUPYTER_TOKEN)
  private String jupyterToken;

  public static final String SERIALIZED_NAME_JUPYTER_URL = "jupyter_url";
  @SerializedName(SERIALIZED_NAME_JUPYTER_URL)
  private String jupyterUrl;

  public Instance() {
  }

  public Instance id(String id) {
    
    
    
    
    this.id = id;
    return this;
  }

   /**
   * Unique identifier (ID) of an instance
   * @return id
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "0920582c7ff041399e34823a0be62549", required = true, value = "Unique identifier (ID) of an instance")

  public String getId() {
    return id;
  }


  public void setId(String id) {
    
    
    
    this.id = id;
  }


  public Instance name(String name) {
    
    
    if (name != null && name.length() < 1) {
      throw new IllegalArgumentException("Invalid value for name. Length must be greater than or equal to 1.");
    }
    
    this.name = name;
    return this;
  }

   /**
   * User-provided name for the instance
   * @return name
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "training-node-1", value = "User-provided name for the instance")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    
    
    if (name != null && name.length() < 1) {
      throw new IllegalArgumentException("Invalid value for name. Length must be greater than or equal to 1.");
    }
    this.name = name;
  }


  public Instance ip(String ip) {
    
    
    
    
    this.ip = ip;
    return this;
  }

   /**
   * IPv4 address of the instance
   * @return ip
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "10.10.10.1", value = "IPv4 address of the instance")

  public String getIp() {
    return ip;
  }


  public void setIp(String ip) {
    
    
    
    this.ip = ip;
  }


  public Instance status(StatusEnum status) {
    
    
    
    
    this.status = status;
    return this;
  }

   /**
   * The current status of the instance
   * @return status
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The current status of the instance")

  public StatusEnum getStatus() {
    return status;
  }


  public void setStatus(StatusEnum status) {
    
    
    
    this.status = status;
  }


  public Instance sshKeyNames(List<String> sshKeyNames) {
    
    
    
    
    this.sshKeyNames = sshKeyNames;
    return this;
  }

  public Instance addSshKeyNamesItem(String sshKeyNamesItem) {
    this.sshKeyNames.add(sshKeyNamesItem);
    return this;
  }

   /**
   * Names of the SSH keys allowed to access the instance
   * @return sshKeyNames
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Names of the SSH keys allowed to access the instance")

  public List<String> getSshKeyNames() {
    return sshKeyNames;
  }


  public void setSshKeyNames(List<String> sshKeyNames) {
    
    
    
    this.sshKeyNames = sshKeyNames;
  }


  public Instance fileSystemNames(List<String> fileSystemNames) {
    
    
    
    
    this.fileSystemNames = fileSystemNames;
    return this;
  }

  public Instance addFileSystemNamesItem(String fileSystemNamesItem) {
    this.fileSystemNames.add(fileSystemNamesItem);
    return this;
  }

   /**
   * Names of the file systems, if any, attached to the instance
   * @return fileSystemNames
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Names of the file systems, if any, attached to the instance")

  public List<String> getFileSystemNames() {
    return fileSystemNames;
  }


  public void setFileSystemNames(List<String> fileSystemNames) {
    
    
    
    this.fileSystemNames = fileSystemNames;
  }


  public Instance region(Region region) {
    
    
    
    
    this.region = region;
    return this;
  }

   /**
   * Get region
   * @return region
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Region getRegion() {
    return region;
  }


  public void setRegion(Region region) {
    
    
    
    this.region = region;
  }


  public Instance instanceType(InstanceType instanceType) {
    
    
    
    
    this.instanceType = instanceType;
    return this;
  }

   /**
   * Get instanceType
   * @return instanceType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public InstanceType getInstanceType() {
    return instanceType;
  }


  public void setInstanceType(InstanceType instanceType) {
    
    
    
    this.instanceType = instanceType;
  }


  public Instance hostname(String hostname) {
    
    
    
    
    this.hostname = hostname;
    return this;
  }

   /**
   * Hostname assigned to this instance, which resolves to the instance&#39;s IP.
   * @return hostname
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "10-0-8-196.cloud.lambdalabs.com", value = "Hostname assigned to this instance, which resolves to the instance's IP.")

  public String getHostname() {
    return hostname;
  }


  public void setHostname(String hostname) {
    
    
    
    this.hostname = hostname;
  }


  public Instance jupyterToken(String jupyterToken) {
    
    
    
    
    this.jupyterToken = jupyterToken;
    return this;
  }

   /**
   * Secret token used to log into the jupyter lab server hosted on the instance.
   * @return jupyterToken
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "53968f128c4a4489b688c2c0a181d083", value = "Secret token used to log into the jupyter lab server hosted on the instance.")

  public String getJupyterToken() {
    return jupyterToken;
  }


  public void setJupyterToken(String jupyterToken) {
    
    
    
    this.jupyterToken = jupyterToken;
  }


  public Instance jupyterUrl(String jupyterUrl) {
    
    
    
    
    this.jupyterUrl = jupyterUrl;
    return this;
  }

   /**
   * URL that opens a jupyter lab notebook on the instance.
   * @return jupyterUrl
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "https://jupyter-3ac4c5c6-9026-47d2-9a33-71efccbcd0ee.lambdaspaces.com/?token=53968f128c4a4489b688c2c0a181d083", value = "URL that opens a jupyter lab notebook on the instance.")

  public String getJupyterUrl() {
    return jupyterUrl;
  }


  public void setJupyterUrl(String jupyterUrl) {
    
    
    
    this.jupyterUrl = jupyterUrl;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the Instance instance itself
   */
  public Instance putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Instance instance = (Instance) o;
    return Objects.equals(this.id, instance.id) &&
        Objects.equals(this.name, instance.name) &&
        Objects.equals(this.ip, instance.ip) &&
        Objects.equals(this.status, instance.status) &&
        Objects.equals(this.sshKeyNames, instance.sshKeyNames) &&
        Objects.equals(this.fileSystemNames, instance.fileSystemNames) &&
        Objects.equals(this.region, instance.region) &&
        Objects.equals(this.instanceType, instance.instanceType) &&
        Objects.equals(this.hostname, instance.hostname) &&
        Objects.equals(this.jupyterToken, instance.jupyterToken) &&
        Objects.equals(this.jupyterUrl, instance.jupyterUrl)&&
        Objects.equals(this.additionalProperties, instance.additionalProperties);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, name, ip, status, sshKeyNames, fileSystemNames, region, instanceType, hostname, jupyterToken, jupyterUrl, additionalProperties);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Instance {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    ip: ").append(toIndentedString(ip)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    sshKeyNames: ").append(toIndentedString(sshKeyNames)).append("\n");
    sb.append("    fileSystemNames: ").append(toIndentedString(fileSystemNames)).append("\n");
    sb.append("    region: ").append(toIndentedString(region)).append("\n");
    sb.append("    instanceType: ").append(toIndentedString(instanceType)).append("\n");
    sb.append("    hostname: ").append(toIndentedString(hostname)).append("\n");
    sb.append("    jupyterToken: ").append(toIndentedString(jupyterToken)).append("\n");
    sb.append("    jupyterUrl: ").append(toIndentedString(jupyterUrl)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("name");
    openapiFields.add("ip");
    openapiFields.add("status");
    openapiFields.add("ssh_key_names");
    openapiFields.add("file_system_names");
    openapiFields.add("region");
    openapiFields.add("instance_type");
    openapiFields.add("hostname");
    openapiFields.add("jupyter_token");
    openapiFields.add("jupyter_url");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("status");
    openapiRequiredFields.add("ssh_key_names");
    openapiRequiredFields.add("file_system_names");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to Instance
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!Instance.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Instance is not found in the empty JSON string", Instance.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Instance.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (!jsonObj.get("name").isJsonNull() && (jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (!jsonObj.get("ip").isJsonNull() && (jsonObj.get("ip") != null && !jsonObj.get("ip").isJsonNull()) && !jsonObj.get("ip").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ip` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ip").toString()));
      }
      if (!jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("ssh_key_names") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("ssh_key_names").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `ssh_key_names` to be an array in the JSON string but got `%s`", jsonObj.get("ssh_key_names").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("file_system_names") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("file_system_names").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `file_system_names` to be an array in the JSON string but got `%s`", jsonObj.get("file_system_names").toString()));
      }
      // validate the optional field `region`
      if (jsonObj.get("region") != null && !jsonObj.get("region").isJsonNull()) {
        Region.validateJsonObject(jsonObj.getAsJsonObject("region"));
      }
      // validate the optional field `instance_type`
      if (jsonObj.get("instance_type") != null && !jsonObj.get("instance_type").isJsonNull()) {
        InstanceType.validateJsonObject(jsonObj.getAsJsonObject("instance_type"));
      }
      if (!jsonObj.get("hostname").isJsonNull() && (jsonObj.get("hostname") != null && !jsonObj.get("hostname").isJsonNull()) && !jsonObj.get("hostname").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hostname` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hostname").toString()));
      }
      if (!jsonObj.get("jupyter_token").isJsonNull() && (jsonObj.get("jupyter_token") != null && !jsonObj.get("jupyter_token").isJsonNull()) && !jsonObj.get("jupyter_token").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `jupyter_token` to be a primitive type in the JSON string but got `%s`", jsonObj.get("jupyter_token").toString()));
      }
      if (!jsonObj.get("jupyter_url").isJsonNull() && (jsonObj.get("jupyter_url") != null && !jsonObj.get("jupyter_url").isJsonNull()) && !jsonObj.get("jupyter_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `jupyter_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("jupyter_url").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Instance.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Instance' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Instance> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Instance.class));

       return (TypeAdapter<T>) new TypeAdapter<Instance>() {
           @Override
           public void write(JsonWriter out, Instance value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public Instance read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             Instance instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Instance given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Instance
  * @throws IOException if the JSON string is invalid with respect to Instance
  */
  public static Instance fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Instance.class);
  }

 /**
  * Convert an instance of Instance to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

